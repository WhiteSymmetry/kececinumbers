name: Build and Test Package-Conda

on:
  workflow_dispatch: # Manuel tetikleme
  release:
    types: [published] # Yeni release yayınlandığında tetikler

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-activate-base: false
          python-version: "3.11"
          channels: conda-forge,defaults
          channel-priority: strict

      - name: Install Conda-Build
        run: conda install -n base conda-build -y

      - name: Build the package
        run: |
          conda build . --output-folder ./conda_pkgs --variant-config-files ./conda_build_config.yaml
          mkdir -p dist
          find ./conda_pkgs -name "*.conda" -exec cp {} dist/ \;
          if [ -z "$(ls -A dist)" ]; then
            echo "HATA: Hiçbir conda paketi oluşturulmadı."
            exit 1
          fi
          echo "Paketler dist klasörüne kopyalandı:"
          ls -l dist

      - name: Upload conda package as artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: conda-package
          path: dist/

      - name: Debug: Search numpy on conda-forge
        run: |
          conda search numpy --channel conda-forge | grep 2.2

      - name: Create a clean environment and install dependencies
        run: |
          conda create -n test-env -y python=3.11
          conda install -n test-env -y \
            numpy \
            matplotlib \
            numpy-quaternion \
            sympy

      - name: Install the built package into the test environment
        run: |
          PACKAGE_FILE=$(ls dist/*.conda | head -n 1)
          echo "Installing $PACKAGE_FILE"
          conda install -n test-env -y "$PACKAGE_FILE"

      - name: Test the package in the environment
        run: |
          conda activate test-env && python -c

      - name: Upload to Anaconda Cloud
        if: github.event_name == 'release' && success()
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          conda run -n base anaconda -t $ANACONDA_TOKEN upload \
            dist/*.conda \
            --label main \
            --skip-existing

      - name: Cleanup test environment
        if: always()
        run: |
          conda env remove -n test-env || echo "test-env zaten kaldırılmış veya yok"
